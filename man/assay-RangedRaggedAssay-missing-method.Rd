% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/assay-methods.R
\docType{methods}
\name{assay,RangedRaggedAssay,missing-method}
\alias{assay,RangedRaggedAssay,missing-method}
\title{Create a Matrix of score values using a GRanges or own ranges}
\usage{
\S4method{assay}{RangedRaggedAssay,missing}(x, i, ...)
}
\arguments{
\item{x}{A \linkS4class{RangedRaggedAssay} or \link{GRangesList} class}

\item{i}{Argument from generic (default 1L)}

\item{...}{Additional arguments, see details for more information.}
}
\value{
A \code{matrix} of values from the score column of the metadata.
}
\description{
This function can take a GRanges argument and use each range to check for
overlaps with any of the current ranges in the first argument and return a
score value from the corresponding metadata. This function will only operate
on fully disjoint ranges (see \code{isDisjoint} for details). It can only
work if metadata is present and there is a "score" column in the metadata.
Please see example on how to add metadata to a
\linkS4class{RangedRaggedAssay} or \link{GRangesList} class. This function
uses the \link{overlapsAny} function from the \code{GenomicRanges} package.
}
\details{
The \linkS4class{RangedRaggedAssay} class represents genomic ranges in
matrix shape based on the selected inner metadata column ("mcol"). To
accomplish this, the \code{mcolname} argument can be indicated with a
string. The \code{background} argument can be used to specify a background
value for the resulting matrix (default NA). This usually indicates non-matching
values in the matrix (e.g., 2 for diploid genomes). Users are also able
to provide a \link{GRanges} class object for specifying ranges of
interest in the resulting matrix using the \code{ranges} argument.
The \code{make.names} argument is a logical value  that
allows the user to indicate the automatic creation of automatic names
either from the \code{GRanges} or the \link{RangedRaggedAssay} object in
character format (i.e., "chr1:2-3:+").
}
\examples{
example("RangedRaggedAssay")

## Add some phony metadata to the RangedRaggedAssay
metadata(myRRA) <- list(snparrray1 = DataFrame(score = 1),
snparray2 = DataFrame(score = 1),
snparray3 = DataFrame(score = 3))

assay(myRRA, background = 2)

}

